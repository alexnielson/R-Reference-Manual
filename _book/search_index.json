[
["index.html", "R Reference Manual Introduction", " R Reference Manual Introduction I organized this manual according to Garrett Grolemund and Handley Wickham’s conception of the tools needed to tackle about 80% of the tasks required in a typical data science project (“Introduction”, R for Data Science). Those tools are: Import Tidy Transform Visualize Model Communicate Program. "],
["import-or-create-data.html", "Import or Create Data Notes &amp; References Create Data Import Data from a Local Drive Import Data from the Internet Import Data from a Database Reference Material", " Import or Create Data Notes &amp; References “Data structures” (Wickham, Advanced R) {open_intro} contains data sets useful for practicing and teaching. “Vectors” (Grolemund &amp; Wickham, R for Data Science) Create Data base::array base::c base::data.frame base::factor base::list base::matrix base::seq base::vector Preferable to base::c when creating an empty vector, according to “Five Tips to Improve Your R Code”. stats::rnorm tibble::add_row tibble::tibble Import Data from a Local Drive {base} attach: Attach a set of R objects to the search path. Allows objects in the database to be accessed by giving their names (e.g., height rather than women$height). file.choose: Choose a file interactively. Use as file = file.choose() inside a data import function (such as read_csv and readRDS). load: Reload datasets saved with save(). readRDS: Restore an R object written with saveRDS(). {data.table} fread: Similar to read.table, but faster and more convenient for large data sets. {foreign} read.spss: Read an SPSS data file. {haven} read_sas: Read and write SAS files. {readr} read_csv: Read a comma separated value file into a tibble. read_csv2: Read a semi-colon separated value file into a tibble. read_delim: Read a delimited file into a tibble. read_tsv: Read a tab separated value file into a tibble. {readxl} excel_sheets: List all sheets in an Excel spreadsheet. read_excel: Read xls and xlsx files. read_xls: Read a .xls file. read_xlsx: Read a .xlsx file. {utils} data: Load specified data sets, or list the available data sets. Use this function to load the data sets that accompany R packages, such as openintro’s hsb2 and email50 and gapminder’s gapminder. read.csv: Read a .csv file. read.csv2: Read semi-colon separated value file. read.delim: Read a delimited file. read.delim2: Read a delimited file where the decimal point is a comma. read.table: Read a file in table format. {XLConnect} readWorksheetFromFile: Read data from worksheets in an Excel file. Import Data from the Internet {httr} GET: Get a URL. {jsonlite} read_json: Read and write JSON. {readr} read_csv: Read a comma separated value file into a tibble. read_csv2: Read a semi-colon separated value file into a tibble. read_delim: Read a delimited file into a tibble. read_tsv: Read a tab separated value file into a tibble. {rjson} fromJSON: Convert JSON to R. {utils} download.file: Download a file from the Internet. Example: download.file( &quot;https://assets.datacamp.com/production/repositories/5028/datasets/a55843f83746968c7f118d82ed727db9c71e891f/snake_river_visits.rds&quot;, destfile = paste0(getwd(), &quot;/Snake River Visits.rds&quot;)) snake_river_visits &lt;- readRDS(file.choose()) # or path &lt;- paste0(getwd(), &quot;/Snake River Visits.rds&quot;) snake_river_visits &lt;- readRDS(path) Example: Rdata files # Example 1: download.file( &quot;https://assets.datacamp.com/production/repositories/236/datasets/7f714f993f1ad4c3d26412ae1e537ce6355b1b54/iris.RData&quot;, destfile = &quot;datacamp_iris_dataset.Rdata&quot;) load(&quot;datacamp_iris_dataset.Rdata&quot;) # Example 2: download.file( &quot;https://assets.datacamp.com/production/repositories/235/datasets/3b6fc2923b599058584b57d8c605c6bef454d273/CHIS2009_reduced_2.Rdata&quot;, destfile = &quot;chis_2009.Rdata&quot;, # The documentation for `download.file` indicates that the function will # automatically include `mode = &quot;wb&quot;` for .Rdata files. That may have happened # in Example 1, but didn&#39;t happen in Example 2, which is why I&#39;ve included it. mode = &quot;wb&quot;) load(&quot;chis_2009.Rdata&quot;) unzip: Extract or list zip archives. Example: download.file( &quot;https://assets.datacamp.com/production/repositories/1069/datasets/578834f5908e3b2fa575429a287586d1eaeb2e54/countries2.zip&quot;, destfile = &quot;Data Sets/Countries&quot;, mode = &quot;wb&quot;) unzip(&quot;Data Sets/Countries&quot;, exdir = &quot;Data Sets&quot;) Import Data from a Database DBI dbBind(): Bind values to a parameterized/prepared statement. dbClearResult(): Free all resources (local and remote) associated with a result set. dbConnect(): Connect to a DBMS. dbDataType(): Determine the SQL data type of an object. dbDisconnect(): Disconnect (close) a connection to a DBMS. dbFetch(): Fetch records from a previously executed query. dbGetQuery(): Send query, retrieve the results, and then clear result set. dbListTables(): List remote tables. dbReadTable(): Copy data frames to and from database tables. dbSendQuery(): Execute a query on a given database connection. dbSendStatement(): Execute a data manipulation statement on a given database connection. Reference Material The openintro package contains data sets useful for practicing and teaching. "],
["tidy.html", "Tidy Explore Raw Data Tidy Data Prepare Data for Analysis", " Tidy “Tidying your data means storing it in a consistent form that matches the semantics of the dataset with the way it is stored. In brief, when your data is tidy, each column is a variable and each row is an observation. Tidying data is important because the consistent structure lets you focus your struggle on questions about the data, not fighting to get the data into the right form for different functions.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Explore Raw Data Understand the Structure of the Data {base} attr: Get or set attributes of an object. attr(x, &quot;names&quot;) is the same as names(x). Use attr(x, &quot;names&quot;) &lt;- value to set attribute values. attributes: Object attribute lists. class: Get or set the class attribute of an object. colnames: Retrieve or set the column names of a matrix-like object. dim: Retrieve or set the dimension of an object. dimnames: Retrieve or set the dimension names of an object. format: Format an R object. length: Get or set the length of an object. levels: Get or set the (factor) levels of a variable. Levels default to alphabetical order, so be careful when renaming them (i.e., don’t accidentally set the “F” level equal to “Male” rather than “Female”). mode: Get or set the storage mode attribute of an object. Modes include logical, numeric (the mode equivalent of typeof’s integer and double types), complex, character, raw, and list. names: Get or set the names of an object. nchar: Count the number of characters (or bytes or width). rownames: Retrieve or set the row names of a matrix-like object. typeof: Display the R internal type of an object. Types include logical, integer, double, complex, character, raw, and list. {tibble} glimpse: Get a glimpse of the data. Similar to utils::str. {utils} str(): Display the structure of an R object. Similar to tibble::glimpse. Look at the Data base names(): Get or set the names of an object. order(): Rearrange in ascending or descending order. summary(): Summarize the object. utils head(): View the first observations in a data frame. tail(): View the last observations in a data frame. Visualize the Data graphics hist(): Create a histogram. plot(): Create an x-y plot. Tidy Data Manage Columns and Observations {base} duplicated: Determine duplicate elements. See also data.table::duplicated. unique: Extract unique elements. See also data.table::unique. {data.table} anyDuplicated: Indicate the index of the first duplicate entry. duplicated: Return a logical vector indicating whether a row is a duplicate. See also base::duplicated. unique: Remove duplicate rows. See also base::unique. {janitor} remove_empty: Remove empty rows and/or columns from a data.frame or matrix. {splitstackshape} cSplit: Split concatencated values into separate values. {tibble} rownames: Tools for working with row names. rowid_to_column: Add a column of sequential row IDs. Useful when a separate ID is required to manipulate rows or columns, such as when using tidyr::gather. {tidyr} gather: Gather columns into key-value pairs. nest: Nest repeated values in a list-variable. Helpful when separating a data frame in preparation to model the data for each grouping. replace_na: Replace missing values. separate: Separate one column into multiple columns. spread: Spread across multiple columns. unite: Unite multiple columns into one. unnest: Unnest a list-column. Transpose {purrr} transpose: Turn a list-of-lists inside-out. Prepare Data for Analysis Coerce Data {base} anyNA: Possibly faster implementation of any(is.na(x)). as.* as.array: Coerce to array. as.data.frame: Coerce to data frame. Prefertibble::as_tibble to base::as.data.frame. as.Date: Coerce to date. as.factor: Coerce to factor. as.list: Coerce to list. as.matrix: Coerce to matrix. as.POSIX*: Coerce to POSIXlt or POSIXct. is.na: Indicate which elements are missing. Use is.na &lt;- to set elements to NA. unclass: Remove the class attribute of an object. {methods} as: Force an object to belong to a class. {tibble} as_tibble: Coerce lists and matrices to data frames. Preferable to base::as.data.frame. enframe: Convert vectors to data frames, and vice versa. Preferable to using as_tibble to coerce a vector to a data frame. Dates and Datetimes anytime anytime(): Parse POSIXct or Date objects from input data. base as.Date(): Date conversion to and from character. as.POSIX*(): Date-time conversion for POSIXct and POSIXlt. as.POSIXct(): Setting default for UTC and 1970. strptime(): Date-time conversion to and from character. Sys.timezone(): Return the name of the current time zone. OlsonNames() displays available time zones. fasttime fastPOSIXct(): Convert strings into POSICct object (string must be in year, month, day, hour, minute, second format.) hms hms(): Store time-of-day values as hms class. Child functions: as.hms(), `is.hms(). lubridate as_date(): Convert an object to a date or date-time. parse_date_time(): User friendly date-time parsing functions that can accomodate parsing multiple dates in different formats. fast_strptime(): Fast C parser of numeric formats only that accepts explicit format arguments, just as base::strptime(). Note that the format argument must match the input exactly, including any non-white space characters (such as “T” and “Z”). make_date(): Create dates from numeric representations. make_datetime(): Create date-times from numeric representations. parse_date_time2(): Fast C parser of numeric orders. parse_date_time() can be slow because it is designed to be forgiving and flexible. If the dates you are working with are in a consistent format (ideally ISO 8601), use one of the following: fasttime::fastPOSIXct() ymd(): Parse dates with year, month, and day components. + Related formats: ydm(), mdy(), myd(), dmy(), dym(), yq(). ymd_hms(): Parse date-times with year, month, day, hour, minute, and second components. + Related formats: ymd_hm(), ymd_h(), dmy_hms(), dmy_hm(), dmy_h(), mdy_hms(), mdy_hm(), mdy_h(), ydm_hms(), ydm_hm(), ydm_h(). Factors and Levels base factor(): Get and set factors. Rearrange the order of factors by using the levels argument. For example, rearrange the order of “Bad,”Good,&quot; and “Neutral” using `levels = c(“Bad”, “Neutral”, “Good”). Filter and Remove Data purrr keep(): Keep or discard elements using a predicate function. stats na.omit(): Remove rows with NA values. Strings base cat: Concatenate and print. chartr: Change certain characters. gregexpr: grep: Pattern matching and replacement. grepl: gsub: regexec: regexpr: sub: tolower: Convert to lowercase. stringr::str_to_lower is an alternative. toupper: Convert to uppercase. stringr::str_to_upper is an alternative. qdap check_spelling qdapDictionaries DICTIONARY: Nettalk Corpus syllable data set. GradyAugmented: Augmented list of Grady Ward’s English Words and Mark Kantrowitz’s Names List. Mark Kantrowitz’s Names list is available in full here. stringr str_detect: Detect the presence or absence of a pattern in a string. Control the pattern argument options with regex (e.g., str_detect(x, regex(pattern, ignore_case = TRUE)). str_remove: Remove matched patterns in a string. str_to_lower: Convert to lower case. str_to_title: Capitalize the first letter. str_trim: Trim whitespace from a string. str_to_upper: Convert to upper case. Test Data base all(): Are all values true? any(): Are any values true? Use any(is.na(data.frame)) to determine if there are any NA values in a data frame. exists(): Check whether an R object exists. is.*() functions: is.array(): Test whether an object is an array. is.data.frame(): Test whether an object is a data frame. is.matrix(): Test whether an object is a matrix. is.vector(): Test whether an object is a vector. setequal(): Check two vectors for equality. sum(): Sum vector elements. To test whether all elements of a vector do or do not meet a certain condition, use as follows: sum(email$num_char &lt; 0). purrr every(): Do every or some elements of a list satisfy a predicate? stats complete.cases(): Find complete cases (i.e., rows without NA values). tibble is_tibble(): Test whether an object is a tibble. "],
["transform.html", "Transform Arithmetic &amp; Summary Statistics Create New Variables or Modify Existing Ones Dates and Datetimes Factors Merge or Append Data Narrow in on Observations of Interest Test", " Transform “Transformation includes narrowing in on observations of interest (like all people in one city, or all data from the last year), creating new variables that are functions of existing variables (like computing velocity from speed and time), and calculating a set of summary statistics (like counts or means).” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Arithmetic &amp; Summary Statistics {assertive} is_divisible_by: Is the input divisible by a number? {base} abs: Compute absolute value. colMeans: Compute the column mean. colSums: Compute the column sum. diff: Compute the difference between two objects. IQR: Compute the inter-quartile range. max: Return the maximum value. mean: Compute the mean value. Note that mean can be used to calculate a percentage when used in summarize, as follows: by_country &lt;- votes %&gt;% group_by(country) %&gt;% summarize(total = n(), percent_yes = mean(vote == 1)) median: Compute the median value. min: Return the minimum value. Mode: Use table to view the mode of a data set. Operators: Arithmetic Operators: +, -, *, /, %% Comparison Operators: &lt;, &gt;, &lt;=, &gt;=, ==, !=. Use identical and all.equal rather than == and != in tests where a single TRUE or FALSE is required (such as if expressions). range: Return a vector containing the minimum and maximum values. Use diff(range()) to get the range as a measure of variability. round: Round values to a specified number of decimal places. rowMeans: Compute the row mean. rowSums: Compute the row sum. sd: Compute the standard deviation. signif: Round values to a specified number of significant digits. sqrt: Compute square root. sum: Sum elements. summary: Compute summary statistics. var: Compute the variance. {dplyr} count: Count/tally observations by group. group_by: Group by one or more variables. n: Get the number of observations in a current group. Must be used within summarise, mutate, or filter. n_distinct: Count the number of unique values in a vector. summarize: Reduce multiple values to a single value. Use mean(variable == value) to get a percentage (see the above example for mean.) tally: An alternative to count. top_n: Select top (or bottom) n rows (by value). {magrittr} extract: Pipeable extraction operator. x %&gt;% extract(y) is equivalent to x[y]. multiply_by: Pipeable multiplication operator. x %&gt;% multiply_by(y) is equivalent to x * y. raise_to_power: Pipeable exponent operator. x %&gt;% raise_to_power(y) is equivalent to x^y. {stats} aggregate: Compute summary statistics of data subsets. cor: Correlation. cov: Covariance. lag: Lag a time series. rnorm: Generate a random normal distribution. var: Variance. Create New Variables or Modify Existing Ones countrycode countrycode(): Convert country codes into country names. dplyr mutate(): Add new variables. mutate() can also be used to modify existing variables. To change the case of a character variable, for example, do something like: df &lt;- df %&gt;% mutate(var_name = str_to_lower(var_name)) + Child function: `transmute()` (drops existing variables). recode(): Recode values (the numeric alternative to using if_else or case_when()). Dates and Datetimes base date(): Get the current system date and time. difftime(): Time intervals and differences. difftime() is the function behind the - operator when used with dates and datetimes (e.g., time_1 - time_2 is equivalent to difftime(time_1, time_2)). The advantage of using difftime() over -, however, is the units argument because it allows you to specify the unit of time in which the difference is calculated. months(): Extract the month names. quarters(): Extract the calendar quarters. Sys.Date(): Get the current date in the current time zone. Sys.time(): Get the absolute date-time value (which can be converted to various time zones and may return different days). weekdays(): Extract weekday names. lubridate date(): Get or set the date component of a date-time. day(): Get or set the day component of a datetime. month(): Get or set the month component of a datetime. now(): The current time (as a POSIXct object). quarter(): Get or set the fiscal quarter or semester component of a datetime. round_date(): Round the datetime to the nearest datetime. Child functions: ceiling_date(), floor_date(). Time spans: Duration: dseconds(), dminutes(), dhours(), ddays(), dweeks(), dyears(). Use when you are interested in seconds elapsed. Time spans: Interval: interval(), %--%, is.interval(), int_start(), int_end(), int_length(), int_flip(), int_shift(), int_overlaps(), int_standardize(), int_aligns(), int_diff(). Use when you have a start and end. Time spans: Period: seconds(), minutes(), hours(), days(), weeks(), months(), years(). Use when you are interested in human units. Time zones: force_tz(): Change the time zone without changing the clock time. tz(): Extract the time zone from a datetime. with_tz(): View the same instant in a different time zone. today(): The current date (as a Date object). %m+% &amp; %m-%: Add and subtract months to a date without exceeding the last day of the new month. %within%: Test whether a date or interval falls within an interval. year(): Get or set the year component of a datetime. Factors forcats fct_drop(): Drop levels. fct_reorder(): Reorder levels, based on the value of another variable. fct_rev(): Reverse levels. stats reorder(): Reorder levels of a factor. Useful within the aes() argument in a ggplot() call. Merge or Append Data base append(): Add elements to a vector. cbind(): Combine objects by column. intersect(): Combine data shared in common between two datasets. Similar to dplyr::semi_join(). merge(): Merge two data frames. dplyr::join functions are an alternative to merge(). rbind(): Combine objects by row. setdiff(): Find the difference between two vectors. Similar to dplyr::anti_join(). union(): Combine two datasets without duplicating values. dplyr bind(): Bind multiple data frames by row and column. Child functions: bind_rows(), bind_cols(), combine(). Join Functions: Join two tables. Filtering Joins: anti_join(): Return all rows from x where there are not matching values in y, keeping just columns from x. semi_join(): Return all rows from x where there are matching values in y, keeping just columns from x. A semi join differs from an inner join because an inner join will return one row of x for each matching row of y, where a semi join will never duplicate rows of x. Mutating Joins: full_join(): Return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing. inner_join(): Return all rows from x where there are matching values in y, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned. left_join(): Return all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. right_join(): Return all rows from y, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between y and x, all combinations of the matches are returned. tibble add_column(): Add columns to a data frame. add_row(): Add rows to a data frame. Narrow in on Observations of Interest {base} droplevels: Drop unused levels from factors. This function will keep levels that have even 1 or 2 counts. If you want to remove levels with low counts from a data set in order to simplify your analysis, first filter out those rows and then use droplevels. order: Arrange in ascending or descending order. Alternative: dplyr::arrange. prop.table: Express table entries as proportions of the marginal table. The input is a table produced by table. As these are proportions of the whole, sum(prop.table(table_name)) = 1. Specify conditional proportions on rows or columns by using the margin argument. table: Build a table of the counts at each combination of factor levels. Use prop.table to see the table entries expressed as proportions. {dplyr} arrange: Arrange rows by variable, in ascending order. Related functions: arrange_all, arrange_at, arrange_if. distinct: Select distinct rows. filter: Return rows with matching conditions. Use %in% when using multiple | conditions. The following two commands, for example, are equivalent: ilo_data %&gt;% filter(country %in% c(&quot;Sweden&quot;, &quot;Switzerland&quot;)) ilo_data %&gt;% filter(country == &quot;Sweden&quot; | country == &quot;Switzerland&quot;) renam: Rename variables by name (a modification of select). sample_n: Sample n rows from a table. select: Select/rename variables. Helper functions include: starts_wit, ends_with, contains, matches, num_range, and one_of. See ?dplyr::select_helpers. Helper functions take strings (e.g., contains(&quot;work&quot;) rather than contains(work)). slice: Choose rows by position. transmute: Create or transform variables. Like a combination of select and mutate. Test base identical(): Test objects for exact equality. match(): Value matching. %in% is the more intuitive binary operator. setequal(): Check two vectors for equality. which(): Determine which indices are TRUE. This function is often unnecessary, according to the DataCamp article “Five Tips to Improve Your R Code”. which.min()/which.max(): Where is the min()/max() or first TRUE/FALSE? %in%: See match(). "],
["visualize.html", "Visualize Flowcharts Interfaces Plots", " Visualize “Visualisation is a fundamentally human activity. A good visualisation will show you things that you did not expect, or raise new questions about the data. A good visualisation might also hint that you’re asking the wrong question, or you need to collect different data. Visualisations can surprise you, but don’t scale particularly well because they require a human to interpret them.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Flowcharts diagram DiagrammeR Interfaces shiny Plots {base} abline: Add straight lines to a plot. plot: Generic X-Y plotting. points: Add points to a plot. {ggbeeswarm} geom_beeswarm: Create a beeswarm plot. ggplot2 aes: Construct aesthetic mappings. Arguments include color, fill, size, labels, alpha, shape (1-20 accept color attributes and 21-25 accept color and fill attributes), linewidth, linetype, and group. Use ?pch to see options for shape. The default shape for points does not have a fill attribute, which means that mapping a categorical variable onto fill won’t result in multiple colors. Helper functions to include in the call when needing to modify the data include: stats::reorder. coord_* coord_cartesian: Zoom a plot in or out without changing the underlying data. coord_flip: Flip the x and y axes. coord_polar: Used to convert a stacked bar chart to a pie chart. facet_* facet_grid: Lay out panels in a grid. facet_wrap: Wrap a 1D ribbon of panels into 2D (observe a variable, conditional on another variable). geom_*: Create a geometry. Note that aes can be called within geom_* rather than prior to. geom_abline: Add reference lines to a plot. geom_bar: Create a bar chart, where the height of the bar is proportional to the number of cases in each group. geom_boxplot: Create a boxplot. geom_col: Create a bar chart, where the height of the bar represents values in the data. geom_density: Create a kernal density estimate (a smoothed version of a histogram). Consider using geom_rug with geom_density in order to be transparent about smoothed data. geom_dotplot: Create a histogram out of dots. geom_histogram: Create a histogram. Use y = stat(density) to rescale the y-axis from counts to a probability estimate. geom_hline: Add a horizontal reference line to the plot. *geom_jitter: Jitter points. Useful with geom_boxplot. geom_path: Connect observations in the order in which they appear. geom_point: Create a scatterplot (a.k.a. point chart or dot plot). geom_rug: Create a ruge plot in the margin. Useful with geom_density. geom_smooth: Smoothed conditional means; aids the eye in seeing patterns in the presence of overplotting. geom_text: Add text directly to the plot. geom_violin: Create a violin plot. geom_vline: Add a vertical reference line to the plot. ggplot: Create a plot. ggtitle: Modify the plot title. group: Specify groupings. Used within aes. Note that group is usually unnecessary when specifying color, shape, fill, or linetype within aes, or when using facets. See “Aesthetics: grouping” for more information. labs: Modify axis, legend, and plot labels. position_*: position_identity: Don’t adjust position. position_dodge: Dodge overlapping objects side-to-side. position_nudge: Nudge points a fixed distance. position_stack: Stack overlapping objects on top of each other, as counts. position_fill: Stack overlapping objects on top of each other, as densities. position_jitter: Jitter points to avoid overplotting. position_jitterdodge: Simultaneously dodge and jitter. scale_*_*: scale_x_* scale_y_* scale_color_* scale_fill_* scale_shape_* scale_size scale_linetype_* stat_*: Statistic layers (sometimes called by geom_ layers). stat_bin stat_bin2d stat_bindot stat_binhex stat_boxplot stat_contour stat_quantile stat_smooth stat_sum xlab: Modify the label of the x-axis. ylab: Modify the label of the y-axis. {ggridges} geom_density_ridges: Create a ridgeline plot. {graphics} boxplot: Create a box-and-whisker plot. hist: Create a histogram. stripchart: One dimensional scatter plots. Preferable to ggplot when creating one-dimensional plots. {grDevices} colorRamp: Color interpolation. colorRampPalette: Color interpolation. {RColorBrewer} brewer.pal: Make the ColorBrewer color palettes available as R palattes. "],
["model.html", "Model General Regression Simulation &amp; Prediction Strings", " Model “Models are complementary tools to visualisation. Once you have made your questions sufficiently precise, you can use a model to answer them. Models are a fundamentally mathematical or computational tool, so they generally scale well. … But every model makes assumptions, and by its very nature a model cannot question its own assumptions. That means a model cannot fundamentally surprise you. - Garrett Grolemund &amp; Hadley Wickham, R for Data Science” General {base} sample: Random samples and permutations. {dplyr} sample_n: Sample n rows from a table. {stats} coef: Extract model coefficients. cor: Correlation. cov: Covariance. cov2cor: Scale a covariance matrix into a correlation matrix. var: Variance. Regression {broom} augment: Augment data with information from an object. glance: Construct a single row summary of a model, fit, or other object. tidy: Turn an object into a tidy tibble. {mgcv} gam: Generalized additive models (GAMs) with integrated smoothness estimation. {stats} df.residual: Get the residual degrees of freedom. lm: Fit linear models. p.adjust: Adjust p-values for multiple comparisons. predict: Model predictions. residuals: Extract model residuals. {tidyr} nest: Nest repeated values in a list-variable. Helpful when separating a data frame in preparation to model the data for each grouping. Simulation &amp; Prediction base set.seed(): Random number generation. stats predict(): Model prediction. Use with “lm” class objects and new data to predict new values (e.g., predict(model, newdata)). rnorm(): Generate a normal distribution. Strings base agrep(): Approximate string matching (fuzzy matching). fuzzyjoin stringdist_join(): Join two tables based on fuzzy string matching of their columns. Child functions: stringdist_inner_join(), stringdist_left_join(), stringdist_right_join(), stringdist_full_join(), stringdist_semi_join(), stringdist_anti_join(). fuzzywuzzyR FuzzMatcher(): Fuzzy character string matching (ratios). "],
["communicate.html", "Communicate Export Graphics Plots RMarkdown", " Communicate “The last step of data science is communication, an absolutely critical part of any data analysis project. It doesn’t matter how well your models and visualisation have led you to understand the data unless you can also communicate your results to others.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Export base file.path(): Construct a file path. print(): Print values. Use the include.rownames = FALSE argument to remove row numbers (or names) from the output. save(): Save R objects. saveRDS(): Save a single R object. See “A better way of saving and loading objects in R” to understand the differences between save() and saveRDS(). readr write_delim(): Write a data frame to a delimited file. About twice as fast as write.csv() and never writes row names. Child functions: write_csv(), write_excel_csv(), write_tsv(). utils write.table(): Data output. Prefer readr::write_delim() to utils::write.table(). Child functions: write.csv(), write.csv2(). XLConnect: Read, write, and format Excel data. ## Format Output base format(): Format an object for pretty printing. knitr kable(): Create tables in LaTex, HTML, Markdown, and reStructuredText. lubridate stamp(): Format dates and times based on human-friendly templates. scales: Scale functions for visualization. dollar(): Round to the nearest cent and display dollar sign. Graphics ‘knitr’ include_graphics(): Embed external images in ‘knitr’ documents. Preferable to the ![alt text or image title](path/to/image) Markdown syntax for embedding an external image, as include_graphics() offers more control over the attributes of the image. Plots ggplot2 element_*(): Specify the display of how non-data components of a plot are drawn. labs(): Modify axis, legend, and plot labels. Child functions: xlab(), ylab(), ggtitle() theme(): Customize the non-data components of a plot. ggplot(plot_data_2006) + geom_histogram(aes(x = working_hours)) + labs(x = &quot;Working hours per week&quot;, y = &quot;Number of countries&quot;) + theme( text = element_text(family = &quot;Bookman&quot;, color = &quot;gray25&quot;)) + child Functions: `theme_*()` are predefined themes, including `theme_classic()` and `theme_minimal()`. See `?theme_classic` for a list of predefined themes. RMarkdown See RMarkdown: The Definitive Guide See Mozzila Developer Network for CSS help. "],
["program.html", "Program Conditionals &amp; Control Flows Environment and Workspace Evaluation (Standard and Non-standard) Functionals Functions Learn About an Object Loops Optimization Pipes Popups Selecting &amp; Subsetting Version Control", " Program “Surrounding [the tools for importing, tidying, transforming, visualising, modeling, and communicating data] is programming. Programming is a cross-cutting tool that you use in every part of a project. You don’t need to be an expert programmer to be a data scientist, but learning more about programming pays off because becoming a better programmer allows you to automate common tasks, and solve new problems with greater ease.” - Garrett Grolemund &amp; Hadley Wickham, R for Data Science Conditionals &amp; Control Flows base Control (access documentation using “?Control”) if (cond) expr The key difference between if (cond) expr and ifelse is that if (cond) expr will evaluate only the first element of an object with length &gt; 1. See the documentation for each function and the ateucher’s GitHub example titled “R: if vs ifelse” to learn more. for (var in seq) expr while (cond) expr repeat expr break next identical(): Test objects for exact equality. Use identical() rather than == and != in if and while statements to test for equality. ’ifelse(): Conditional element selection. +dplyr::if_else()` is more strict by checking the object type. stop(): Stop execution of the expression and execute an error action. Useful in combination with an if statement when you want to generate helpful error messages. stopifnot(): Ensure the truth of an R expression. Prefer base::stop() to base::stopifnot(). dplyr case_when(): A general vectorized if. if_else(): Vectorized if. Environment and Workspace {base} dir: List the files in a directory/folder. Environments baseenv: The environment of the base package, it’s enclosing environment (“parent environment”) is the empty environment. emptyenv: The empty environment, which is the ancestor of all environments and the only environment without an enclosing environment. environment: The current environment. globalenv: The environment in which you normally work, it’s enclosing environment is the last package attached with library or require. new.env: Create a new environment. environmentName: Return the name of the environment, as a character string. exists: Look for an R object of the given name and possibly return it. Must use quotations to name the object. Remember that R will look for an object in parent environments until it reaches the empty environment, so use inherits = FALSE to limit the search to only the current environment. getOption: Set and examine global options. getwd: Get the working directory. history: Display the previous 25 commands. install.packages: Install packages from repositories or local files. library: Load and attach packages, returning an error if the packages does not exist. list.files: List the files in a directory/folder. `loadedNamespaces: Return the loaded name spaces. loadhistory: Recall command history. ls: List objects in the specified environment. list2env: From a list, build or add to an environment. options: Set and examine global options. parent.env: Return the enclosing environment of the environment listed as an argument. parent.env returns information that can be unhelpful, so use with environmentName, as follows: parent.env(environment_name) %&gt;% environmentName. q: Terminate an R session. R.version: Version information. R.version.string: Version information. Same call as R.version$version.string. require: Load and attach packages, returning FALSE if the package does not exist. rm: Remove objects from a specified environment. savehistory: Save command history (default value is “.Rhistory”). save.image: Save the current workspace. search: Return a list of attached packages and R objects. searchpaths: Return the path to attached packages. setwd(): Set the working directory file path. When using Windows, use “/” instead of &quot;&quot;. Sys.info: Extract system and user information. Example: Sys.info()[c(&quot;sysname&quot;, &quot;release&quot;)]. {gdata} object.size: Report the space allocated for an object. See also utils::object.size. {installr} updateR: Check for the latest R version; downloads and installs new R versions. {pryr} where: Find where a name is defined. {utils} ls.str: List objects and their structure. object.size: Report the space allocated for an object. See also gdata::object.size. sessionInfo: Collect information about the current R session. References: “Environments” (Hadley Wickham, Advanced R) Evaluation (Standard and Non-standard) base cat(): Concatenate and print. print(): Print the argument to the Console. + A shortcut toprint()` is to place the code you want printed inside parentheses. quote(): Return the argument, unevaluated. writeLines(): Display quotes and backslashes as they would be read, rather than as R stores them (i.e., see the raw contents of the string, as the print() representation is not the same as the string itself). rlang Quosures enquo(), new_quosure(), quo(). References: “Non-standard evaluation” (Hadley Wickham, Advanced R) “Non-standard evaluation” (Hadley Wickham, lazyeval package vignette) “Programming with dplyr” (dplyr.tidyverse.org) Functionals {base} Apply Functions apply: Apply functions over array margins. lapply: Apply a function over a list or vector. sapply: Apply a function over a list or vector and return a vector or matrix. vapply: A safer version of sapply, as it requires the output type to be predetermined. mapply: Apply a function to multiple list or vector arguments. rapply: Recursively apply a function to a list. tapply: Apply a function over a ragged array. {purrr} map: Apply a function to each element of a vector. tidyr::unnest is useful in changing the list-column output of map into rows. map2: Map over multiple inputs simultaneously. map_if: Apply a function to elements of that match a condition. possibly: Usese a default value whenever an error occurs. quietly: Capture side effects in a list with components result, output, messages, and warnings. safely: Capture side effects in a list with components result and error. transpose: Transpose a list (turn a list-of-lists inside-out). Functions {assertive} assert_*: Check whether the input is * (e..g, assert_is_numeric) and throw and error if the input does not meet the condition. coerce_to: Coerce the input to a different class, with a warning. is_*: Checks whether the input matches the condition specified by * (e.g., is_non_positive). use_first: Use only the first element of a vector. {base} do.call: Execute a function call from a name or a function and a list of arguments to be passed to the function. invisible: Return a (temporarily) invisible copy of an object. match.arg: Argument verification. Useful when matching a character argument specified in the function signature. For example, args(prop.test) ## function (x, n, p = NULL, alternative = c(&quot;two.sided&quot;, &quot;less&quot;, ## &quot;greater&quot;), conf.level = 0.95, correct = TRUE) ## NULL # The body of `prop.test` contains the following line of code: # `alternative &lt;- match.arg(alternative), which reassigns it to the selected # character vector. message: Generage a diagnostic message. Preferable to generating a message using cat. return: Return a value from a function. Useful in if statements where one condition is simple and the other is complex (see section 19.6.1 “Explicit return statements” in Hadley Wickham’s R for Data Science. setNames: Set the names in an object. Useful in function writing; see documentation. stop: Stop execution of the expression and execute an error action. Useful in combination with an if statement when you want to generate helpful error messages. stopifnot: Ensure the truth of an R expression. See section 19.5.2 “Checking values” in Hadley Wickham’s R for Data Science for a discussion of stop versus stopifnot. Consider functions from {assertive} as an alternative to stopifnot and stop. unlist: Flatten lists. Useful when using purrr’s map functions, which return objects as type list. {zeallot} %&lt;-%: Multiple assignment operator. Useful when you want to return multiple output from a function. For example: session &lt;- function() { list( r_version = R.version.string, operating_system = Sys.info()[c(&quot;sysname&quot;, &quot;release&quot;)], loaded_pkgs = loadedNamespaces() ) } c(vrsn, os, pkgs) %&lt;-% session() Learn About an Object base args(): Display the argument names and default values of a function. attributes(): View or assign an objects attributes (e.g., class(), dim(), dimnames(), names(), row.names()). body(): Get or set the body of a function. colnames(): Retrieve or set column names. dim(): Retrieve or set the dimnames of an object. dimnames(): Retrieve or set the dimension names of an object. formals(): Get or set the formal arguments of a function. help(): Get the topic documentation. help.search(): Search the help system for documentation matching a given character string. vignette(): View a specified package vignette. ?object_name ??object_name rownames(): Retrieve or set row names. Loops base seq(): Sequence generation. This functions makes length() unnecessary. Child function: seq_along() In for loops, safer than using ncol() or nrow(). Optimization microbenchmark microbenchmark(): Sub-millisecond accurate timing of expression evaluations. A more accurate replacement of system.time(replicate(1000, expr)). Pipes magrittr %&lt;&gt;%: Compound assignment-pipe operator. %&gt;%: Forward-pipe operator. %$%: Expositions-pipe operator. add: +, for pipes. and: &amp;, for pipes. extract:[, for pipes. extract2: [[, for pipes. freduce: Apply a list of functions sequentially. is_in: %in%, for pipes. multiply_by: *, for pipes. or: |, for pipes. raise_to_power: ^, for pipes. subtract: -, for pipes. Popups svDialogs dlg_message: Display a modal message box (works in Windows, MacOS, and Linux). tcltk tk_messageBox: Display a generic message box using Tk (Windows-specific). Selecting &amp; Subsetting .$variable_name See example below. .[[&quot;variable_name&quot;]] See example below. base::subset dplyr::first dplyr::last dplyr::nth dplyr::rename dplyr::select Helper functions: contains, ends_with, matches, num_range, one_of, starts_with. `dplyr::rena Example: .$variable_name ui_summary_table &lt;- aws_vendors %&gt;% filter(str_detect(vendor_name, &quot;UTAH INTERACTIVE&quot;)) %&gt;% .$vendor_id %&gt;% map(query_summary_table) %&gt;% bind_rows() Example: .[[&quot;variable_name&quot;]] odbc_aws %&gt;% dbGetQuery( paste(&quot; SELECT id FROM batch WHERE entity_id = &quot;, t_id, &quot; AND status IN (&#39;PROCESSED&#39;, &#39;PROCESSING&#39;)&quot;)) %&gt;% .[[&quot;id&quot;]] %&gt;% as.double() References: “Indexing lists in #rstats. Inspired by Residence Inn” (Hadley Wickham, Twitter, 14 September 2015) Version Control Git Git Pro Git by Scott Chacon and Ben Straub Git and GitHub by Hadley Wickham Happy Git and GitHub for the useR by Jenny Bryan git branch: List, create, or delete branches. git branch -d &lt;branch_name&gt;: Delete a local branch. See “Delete branch in RStudio pop-up” for help removing branches in RStudio after removing them from Git. {packrat} See note on the packrat package in the “Referenced Packages” section. snapshot: Capture and store the packages and versions in use. restore: Load the most recent snapshot to the project’s private library. "],
["referenced-packages.html", "Referenced Packages A-D E-H I-L M-P Q-T U-Z", " Referenced Packages A-D anytime: Date converter. assertive: Check functions to ensure code integrity. base: Base R functions. bookdown: Author books and technical documents with R Markdown. + See Yihui Xie’s bookdown: Authoring Books and Technical Documents with R Markdown. broom: Convert statistical analysis objects into tidy data frames. car: Companion to applied regression. chron: Chronological objects which can handle dates and times. countrycode: Convert country names and country codes. data.table: For large data. DBI: Database interface. For MySQL documentation, see the MySQL Reference Manual. Use with the odbc package. diagram: Visualize simple graphs (networks); create plot flow diagrams. DiagrammeR: Graph/network visualization. + DiagrammeR uses the GraphViz language. dplyr: Data manipulation. See also dplyr.tidyverse.org. E-H fasttime: Fast utilit function for time parsing and conversion. forcats: Tools for working with categorical variables. fuzzyjoin: Join tables together on inexact matching. fuzzywuzzyR: Fuzzy string matching. gdata: Data manipulation. ggbeeswarm: Categorical scatter plots (violin and beeswarm). ggplot2: Create elegant data visualizations. ggridges: Ridgeline plots in ggplot2. graphics: R functions for base graphics. grDevices: Grahpics devices and support for base and grid graphics. Hmisc: Harrell miscellaneous. hms: Times without dates. httr: Tools for working with HTTP. I-L installr: Install and update stuff (such as R, Rtools, Rstudio, Git). janitor: Simple tools for examining and cleaning dirty data. jsonlite: A robust, high performance JSON parser and generator. knitr: Dynamic report generation in R using Literate Programming techniques. + See Yihui Xie’s knitr. lubridate: Functions to work with date-times and time-spans. lubridate uses character formatting similar to strptime(), though there are some differences. To see lubridate’s formatting, type ?parse_date_time into the R Console. M-P magrittr: Forward-pipe operator for R. methods: Formal methods and classes. mgcv: Mixed GAM computational vehicle with automatic smoothness estimation. microbenchmark: Measure and compare the execution time of R expressions. odbc: Connect to ODBC compatible databases using the DBI Interface. ‘openintro’: Data sets and supplemental functions from OpenIntro textbooks. packrat: Manage and document the versions of packages used in an R program. packrat tends to cause more trouble than it prevents, so avoid using it unless necessary or until it is improved. pryr: Tools to pry back the covers of R and understand the language at a deeper level. purrr: Functional programming tools. See also purr.tidyverse.org. Q-T qdap: Bridging the gap between qualitative data and quantitative analysis (text mining). qdapDictionaries: Dictionaries and word lists for the qdap package. RColorBrewer: ColorBrewer palattes. readr: Read rectangular text data. See also readr.tidyverse.org. readxl: Read Excel files. rjson: Convert between R and JSON objects. rlang: Functions for base types and Core R and Tidyverse features. RMarkdown: Save and execute code; generate high quality reports. See also “R Markdown: The Definitive Guide”). scales: Scale functions for visualization. shiny: Web application framework. splitstackshape: Stack and reshape datasets after splitting concatenated values. stats: Statistical functions. stringr: Working with strings. See also stringr.tidyverse.org). svDialogs: Dialog boxes for Windows, MacOS, and Linuxes. tcltk: Interface and languate bindings to Tcl/Tk GUI elements. tibble: Simple data frames with stricter checking and better formatting than the traditional data frame. tidyr: Tidy data. See also tidyr.tidyverse.org. tinytex: Compile LaTeX Documents. + Required to compile and build a bookdown book. + See https://yihui.name/tinytex/ U-Z utils: Various programming utilities. XLConnect: Read, write, and format Excel data. xts: Provide for uniform handling of R’s different time-based data classes by extending zoo. zeallot: Multiple, unpacking, and destructuring assignment. zoo: For regular and irregular time series. "],
["references-resources.html", "References &amp; Resources", " References &amp; Resources For an introduction to the R programming language, see the R Project for Statistical Computing’s “What is R?” and Wikipedia’s “R (programming language).” To download R, go to r-project.org and choose the cloud CRAN Mirror option. To program in the R language on a user-friendly platform, download the RStudio IDE. The R Project for Statistical Computing Library of R Packages Getting Help with R The R Manuals Frequently Asked Questions Books Related to R Documentation RStudio RStudio Cheat Sheets Webinars and Videos On Demand Online learning RStudio Blog Online Manuals R for Data Science Advanced R by Hadley Wickham + Hadley’s second edition draft is available here. R Packages by Hadley Wickham The R Inferno by Patrick Burns The tidyverse style guide Efficient R Programming Free R Reading Material Other Online Resources DataCamp RDocumentation R Bloggers “Tutorials for learning R” Regular Expressions 101 "],
["references.html", "References", " References "]
]
